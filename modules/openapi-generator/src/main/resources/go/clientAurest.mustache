// Code generated by interhyp-improved OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package {{packageName}}

import (
    "bytes"
    "context"
    "encoding/json"
    "fmt"
    "io"
    "mime/multipart"
    "net/http"
    urlUtil "net/url"
    "strings"
    "time"

    aulogging "github.com/StephanHCB/go-autumn-logging"
    auapmclient "github.com/StephanHCB/go-autumn-restclient-apm/implementation/client"
    aurestbreakerprometheus "github.com/StephanHCB/go-autumn-restclient-circuitbreaker-prometheus"
    aurestbreaker "github.com/StephanHCB/go-autumn-restclient-circuitbreaker/implementation/breaker"
    aurestclientprometheus "github.com/StephanHCB/go-autumn-restclient-prometheus"
    aurestclientapi "github.com/StephanHCB/go-autumn-restclient/api"
    aurestcaching "github.com/StephanHCB/go-autumn-restclient/implementation/caching"
    auresthttpclient "github.com/StephanHCB/go-autumn-restclient/implementation/httpclient"
    aurestrecorder "github.com/StephanHCB/go-autumn-restclient/implementation/recorder"
    aurestlogging "github.com/StephanHCB/go-autumn-restclient/implementation/requestlogging"
    aurestretry "github.com/StephanHCB/go-autumn-restclient/implementation/retry"
    "github.com/go-http-utils/headers"
{{#imports}}    "{{import}}"
{{/imports}}
)

const Authorization_ctx_value = "authorization"

type Client interface {
    Setup(cfg *ClientConfig) error

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}
    {{{nickname}}}Request(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request
    {{{nickname}}}(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}{{#bodyParams}}, {{paramName}} {{{dataType}}}{{/bodyParams}}{{#formParams}}{{#isFile}}, {{paramName}} {{{dataType}}}{{/isFile}}{{/formParams}}{{#queryParams}}, {{paramName}} {{{dataType}}}{{/queryParams}}) ({{#returnType}}{{{.}}}, {{/returnType}}aurestclientapi.ParsedResponse, error)
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}
}

type RequestManipulatorFunc func(ctx context.Context, r *http.Request)

func BasicAuthRequestManipulator(username string, password string) RequestManipulatorFunc {
	return func(ctx context.Context, r *http.Request) {
		r.SetBasicAuth(username, password)
	}
}

type ClientConfig struct {
	BaseUrl string

	CacheRetention time.Duration
	CacheSize      int

	RequestManipulator              RequestManipulatorFunc
	AuthorizationRequestManipulator RequestManipulatorFunc
	TracingRequestManipulator       RequestManipulatorFunc
	LoggingConfigurer               func(client aurestclientapi.Client) aurestclientapi.Client
	CircuitBreakerConfigurer        func(client aurestclientapi.Client) aurestclientapi.Client
	ApmConfigurer                   func(client aurestclientapi.Client) aurestclientapi.Client
	RetryConfigurer                 func(client aurestclientapi.Client) aurestclientapi.Client
	RecorderConfigurer              func(client aurestclientapi.Client) aurestclientapi.Client
	CachingConfigurer               func(client aurestclientapi.Client, cacheRetentionSeconds time.Duration, cacheSize int) aurestclientapi.Client
}

func DefaultApiClientConfig(baseUrl string) *ClientConfig {
	config := &ClientConfig{
		BaseUrl:                         baseUrl,
		RequestManipulator:              nil,
		AuthorizationRequestManipulator: authorizationHeaderSetter,
		TracingRequestManipulator:       nil,
		LoggingConfigurer:               setupLogging,
		CircuitBreakerConfigurer:        setupCircuitBreakerClient,
		ApmConfigurer:                   setupApm,
		RetryConfigurer:                 setupRetryClient,
		RecorderConfigurer:              setupRecorder,
		CachingConfigurer:               setupCachingClient,
		CacheRetention:                  60 * time.Second,
		CacheSize:                       1000,
	}
	config.RequestManipulator = requestHeaderManipulator(config)
	return config
}

type APIClient struct {
    BaseUrl string
	Client aurestclientapi.Client
}

func NewAPIClient() Client {
    return &APIClient{
        Client: nil,
    }
}

// --- setup ---
func (c *APIClient) Setup(cfg *ClientConfig) error {
    c.BaseUrl = cfg.BaseUrl

    //allow tests to pre-populate
    if c.Client != nil {
        return nil
    }

    client, err := setupHttpClient(cfg.RequestManipulator)
    if err != nil {
        return err
    }

    if cfg.LoggingConfigurer != nil {
        client = cfg.LoggingConfigurer(client)
    }

    if cfg.CircuitBreakerConfigurer != nil {
        client = cfg.CircuitBreakerConfigurer(client)
    }

    if cfg.ApmConfigurer != nil {
        client = cfg.ApmConfigurer(client)
    }

    if cfg.RetryConfigurer != nil {
        client = cfg.RetryConfigurer(client)
    }
    if cfg.RecorderConfigurer != nil {
        client = cfg.RecorderConfigurer(client)
    }
    if cfg.CachingConfigurer != nil {
        client = cfg.CachingConfigurer(client, cfg.CacheRetention, cfg.CacheSize)
    }

    c.Client = client

    return nil
}

func setupHttpClient(configuredHeaderManipulator func(ctx context.Context, r *http.Request)) (aurestclientapi.Client, error) {
    client, err := auresthttpclient.New(0, nil, configuredHeaderManipulator)
    if err != nil {
        return nil, err
    }
    aurestclientprometheus.InstrumentHttpClient(client)

    return client, nil
}

func requestHeaderManipulator(config *ClientConfig) func(ctx context.Context, r *http.Request) {
	return func(ctx context.Context, r *http.Request) {
		r.Header.Set(headers.Accept, aurestclientapi.ContentTypeApplicationJson)

		if config != nil && config.AuthorizationRequestManipulator != nil {
			config.AuthorizationRequestManipulator(ctx, r)
		}

		if config != nil && config.TracingRequestManipulator != nil {
			config.TracingRequestManipulator(ctx, r)
		}
	}
}

func authorizationHeaderSetter(ctx context.Context, r *http.Request) {
	ctxAuthorizationValue := ctx.Value(Authorization_ctx_value)
	if ctxAuthorizationValue != nil {
		ctxAuthrizationValueStr, ok := ctxAuthorizationValue.(string)
		if ok && ctxAuthrizationValueStr != "" {
			r.Header.Set(headers.Authorization, ctxAuthrizationValueStr)
		}
	}
}

func setupCircuitBreakerClient(client aurestclientapi.Client) aurestclientapi.Client {
    circuitBreakerWrapper := aurestbreaker.New(
        client,
        "{{appName}}",
        100,
        5*time.Minute,
        60*time.Second,
        // includes possible retries, once the context is cancelled further requests will fail directly
        15*time.Second,
    )
    aurestbreakerprometheus.InstrumentCircuitBreakerClient(circuitBreakerWrapper)
    return circuitBreakerWrapper
}

func setupRetryClient(client aurestclientapi.Client) aurestclientapi.Client {
    retryWrapper := aurestretry.New(
        client,
        3,
        retryCondition(),
        betweenFailureAndRetry(),
    )
    aurestclientprometheus.InstrumentRetryClient(retryWrapper)
    return retryWrapper
}

func retryCondition() aurestclientapi.RetryConditionCallback {
    return func(_ context.Context, response *aurestclientapi.ParsedResponse, err error) bool {
        return response.Status == http.StatusServiceUnavailable
    }
}

func betweenFailureAndRetry() aurestclientapi.BeforeRetryCallback {
    return func(ctx context.Context, originalResponse *aurestclientapi.ParsedResponse, originalError error) error {
        aulogging.Logger.Ctx(ctx).Warn().Print("got 503 from {{appName}}-endpoint - retrying request")
        return nil
    }
}

func setupCachingClient(client aurestclientapi.Client, cacheRetentionSeconds time.Duration, cacheSize int) aurestclientapi.Client {
    cacheWrapper := aurestcaching.New(
        client,
        func(ctx context.Context, method string, url string, requestBody interface{}) bool {
            return method == http.MethodGet
        },
        func(ctx context.Context, method string, url string, requestBody interface{}, response *aurestclientapi.ParsedResponse) bool {
            return response != nil && response.Status == http.StatusOK
        },
        nil,
        cacheRetentionSeconds,
        cacheSize,
    )
    aurestclientprometheus.InstrumentCacheClient(cacheWrapper)
    return cacheWrapper
}

func setupLogging(client aurestclientapi.Client) aurestclientapi.Client {
    return aurestlogging.New(client)
}

func setupApm(client aurestclientapi.Client) aurestclientapi.Client {
    return auapmclient.New(client)
}

func setupRecorder(client aurestclientapi.Client) aurestclientapi.Client {
    return aurestrecorder.New(client)
}

// --- request implementations ---

func safeUnmarshal[T any](response *aurestclientapi.ParsedResponse) error {
	var result T
	responseData, ok := response.Body.(**[]byte)
	if ok {
        if len(**responseData) > 0 {
            err := json.Unmarshal(**responseData, &result)
            if err != nil {
                return NewErrorWrap(err, response.Status)
            }
        }
        response.Body = result
	}else{
		return NewError(fmt.Sprintf("Something wrong"), response.Status)
	}
	return nil
}

// ---- error methods
type Error interface {
    IsHttpError() bool
}

type HttpError struct {
    err    error
    status int
}

func NewErrorWrap(err error, status int) error {
    return &HttpError{
        err:    err,
        status: status,
    }
}

func NewError(message string, status int) error {
    return &HttpError{
        err:    fmt.Errorf(message),
        status: status,
    }
}

func (e *HttpError) Error() string {
    return e.err.Error()
}

func (e *HttpError) Status() int {
    return e.status
}

func (e *HttpError) IsHttpError() bool {
    return true
}

func IsHttpError(err error) bool {
    _, ok := err.(Error)
    return ok
}

// ---- api methods
{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#operation}}

type {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request struct {
    ctx context.Context{{#generateInterfaces}}
    ApiService APIClient
{{/generateInterfaces}}{{^generateInterfaces}}
    ApiService *APIClient
{{/generateInterfaces}}
{{#allParams}}
    {{paramName}} {{^isPathParam}}{{^isFile}}*{{/isFile}}{{/isPathParam}}{{{dataType}}}
{{/allParams}}
}

{{#allParams}}
{{^isPathParam}}
{{#description}}
    // {{.}}
{{/description}}
{{#isDeprecated}}
    // Deprecated
{{/isDeprecated}}
func (r *{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) {{vendorExtensions.x-export-param-name}}({{paramName}} {{{dataType}}}) *{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
    r.{{paramName}} = {{^isFile}}&{{/isFile}}{{paramName}}
    return r
}

{{/isPathParam}}
{{/allParams}}
func (r *{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) Execute() ({{#returnType}}{{{.}}}, {{/returnType}}aurestclientapi.ParsedResponse, error) {
    return r.ApiService.{{nickname}}Execute(r)
}

func (a *APIClient) {{{nickname}}}Request(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
    return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request{
        ApiService: a,
        ctx: ctx,
{{#pathParams}}
        {{paramName}}: {{paramName}},
{{/pathParams}}
    }
}

{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (a *APIClient) {{nickname}}Execute(r *{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) ({{#returnType}}{{{.}}}, {{/returnType}}aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.BaseUrl + "{{{path}}}"
{{#pathParams}}
    {{=<% %>=}}
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{<%baseName%>}", <%^isAllowReserved%>urlUtil.PathEscape(<%/isAllowReserved%><%#isString%>r.<%paramName%><%/isString%><%^isString%>parameterValueToString(r.<%paramName%>)<%/isString%><%^isAllowReserved%>)<%/isAllowReserved%>)
    <%={{ }}=%>
{{/pathParams}}
    requestURL, _ := urlUtil.Parse(fullUrlValue)
{{#queryParams}}
    if r.{{paramName}}!=nil {
{{#isArray}}
        for _, ___element := range *r.{{baseName}} {
            withUrlQueryParam(requestURL, "{{baseName}}", {{#items}}{{#isString}}___element{{/isString}}{{^isString}}parameterValueToString(___element){{/isString}}{{/items}})
        }
{{/isArray}}
{{^isArray}}
        withUrlQueryParam(requestURL, "{{baseName}}", {{#isString}}*r.{{paramName}}{{/isString}}{{^isString}}parameterValueToString(*r.{{paramName}}){{/isString}})
{{/isArray}}
    }
{{/queryParams}}
{{#formParams}}
    {{#isFile}}
    request, multipartErr := createMultipartRequestForFile(r.ctx, r.{{paramName}}["fileName"], r.{{paramName}}["fileContent"])
    if multipartErr != nil {
        return {{#returnType}}{{{.}}}{}, {{/returnType}}aurestclientapi.ParsedResponse{}, multipartErr
    }
    {{/isFile}}
{{/formParams}}
    return a.make{{nickname}}Call(r.ctx, requestURL, {{#bodyParams}}r.{{paramName}}{{/bodyParams}}{{^bodyParams}}{{#formParams}}{{#isFile}}request{{/isFile}}{{/formParams}}{{^formParams}}nil{{/formParams}}{{/bodyParams}})
}

func (a *APIClient) {{{nickname}}}(ctx context.Context{{#pathParams}}, {{paramName}} {{{dataType}}}{{/pathParams}}{{#bodyParams}}, {{paramName}} {{{dataType}}}{{/bodyParams}}{{#formParams}}{{#isFile}}, {{paramName}} {{{dataType}}}{{/isFile}}{{/formParams}}{{#queryParams}}, {{paramName}} {{{dataType}}}{{/queryParams}}) ({{#returnType}}{{{.}}}, {{/returnType}}aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.BaseUrl + "{{{path}}}"
{{#pathParams}}
{{=<% %>=}}
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{<%baseName%>}", <%^isAllowReserved%>urlUtil.PathEscape(<%/isAllowReserved%><%#isString%><%paramName%><%/isString%><%^isString%>parameterValueToString(<%paramName%>)<%/isString%><%^isAllowReserved%>)<%/isAllowReserved%>)
<%={{ }}=%>
{{/pathParams}}
    requestURL, _ := urlUtil.Parse(fullUrlValue)
{{#queryParams}}
{{#isArray}}
    for _, ___element := range {{baseName}} {
        withUrlQueryParam(requestURL, "{{baseName}}", {{#items}}{{#isString}}___element{{/isString}}{{^isString}}parameterValueToString(___element){{/isString}}{{/items}})
    }
{{/isArray}}
{{^isArray}}
    withUrlQueryParam(requestURL, "{{baseName}}", {{#isString}}{{paramName}}{{/isString}}{{^isString}}parameterValueToString({{paramName}}){{/isString}})
{{/isArray}}
{{/queryParams}}
{{#formParams}}
    {{#isFile}}
    request, multipartErr := createMultipartRequestForFile(ctx, {{paramName}}["fileName"], {{paramName}}["fileContent"])
    if multipartErr != nil {
        return {{#returnType}}{{{.}}}{}, {{/returnType}}aurestclientapi.ParsedResponse{}, multipartErr
    }
    {{/isFile}}
{{/formParams}}
    return a.make{{{nickname}}}Call(ctx, requestURL, {{#bodyParams}}{{paramName}}{{/bodyParams}}{{^bodyParams}}{{#formParams}}{{#isFile}}request{{/isFile}}{{/formParams}}{{^formParams}}nil{{/formParams}}{{/bodyParams}})
}

func (a *APIClient) make{{{nickname}}}Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) ({{#returnType}}{{{.}}}, {{/returnType}}aurestclientapi.ParsedResponse, error) {
	method := http.Method{{httpMethod}}
	requestUrl := requestURL.String()

{{#returnProperty}}
    {{#isString}}
    var result *[]byte
    {{/isString}}
    {{^isString}}
    var result {{returnType}}
    {{/isString}}
{{/returnProperty}}
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.Client.Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return {{#returnProperty}}{{#isString}}""{{/isString}}{{^isString}}result{{/isString}},{{/returnProperty}}response, err
	}
{{#responses}}
    {{^is1xx}}
    {{^is2xx}}
    {{#range}}
        {{#is3xx}}
    if response.Status >= 300 && response.Status < 400 {
        {{/is3xx}}
        {{#is4xx}}
    if response.Status >= 400 && response.Status < 500 {
        {{/is4xx}}
        {{#is5xx}}
    if response.Status >= 500 {
        {{/is5xx}}
    {{/range}}
    {{^range}}
        {{^wildcard}}
    if response.Status == {{{code}}} {
        {{/wildcard}}
    {{/range}}
    {{^wildcard}}
    {{#dataType}}
		err := safeUnmarshal[{{{.}}}](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return {{#returnProperty}}{{#isString}}""{{/isString}}{{^isString}}result{{/isString}}, {{/returnProperty}}response, err
    {{/dataType}}
    {{^dataType}}
		return {{#returnProperty}}{{#isString}}""{{/isString}}{{^isString}}result{{/isString}}, {{/returnProperty}}response, nil
    {{/dataType}}
    }
    {{/wildcard}}
    {{/is2xx}}
    {{/is1xx}}
{{/responses}}

{{#returnProperty}}
    {{#isString}}
    result = *response.Body.(**[]byte)
    {{/isString}}
    {{^isString}}
    err = safeUnmarshal[{{returnType}}](&response)
    if err == nil {
        result = response.Body.({{returnType}})
    }
    {{/isString}}
{{/returnProperty}}
    return {{#returnProperty}}{{#isString}}string(*result){{/isString}}{{^isString}}result{{/isString}}, {{/returnProperty}}response, err
}
{{/operation}}
{{/operations}}
{{/apis}}
{{/apiInfo}}


func createMultipartRequestForFile(ctx context.Context, fileName string, fileContent string) (aurestclientapi.CustomRequestBody, error) {
    bufferBytes := &bytes.Buffer{}

    writer := multipart.NewWriter(bufferBytes)
    defer func(writer *multipart.Writer) {
        _ = writer.Close()
    }(writer)

    part, _ := writer.CreateFormFile("files", fmt.Sprintf("%s.txt", fileName))
    _, err := io.Copy(part, strings.NewReader(fileContent))
    if err != nil {
        return aurestclientapi.CustomRequestBody{}, err
    }

    return aurestclientapi.CustomRequestBody{
        BodyReader:  bufferBytes,
        BodyLength:  len(fileContent),
        ContentType: writer.FormDataContentType(),
    }, nil
}


// ---- helper methods

func withUrlQueryParam(requestUrl *urlUtil.URL, valueName string, value string) {
    if value != "" {
        queryParams := requestUrl.Query()
        queryParams.Add(valueName, value)
        requestUrl.RawQuery = queryParams.Encode()
    }
}

func parameterValueToString(obj interface{}) string {
    return fmt.Sprint(obj)
}